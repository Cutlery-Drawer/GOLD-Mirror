<html>

<head>
<title>File Structure: Entries</title>
<link REL="STYLESHEET" HREF="../gold-parser-doc-style.css">
<style type="text/css">
</style>
</head>

<body class="ssMainPage">

<h1>File Structure: Entries</h1>

<h2>Overview</h2>

<p>Each <a href="structure-record.htm">record structure</a> consists of a series of entries
which, in turn, can hold any number of data types. Preceding each entry is an
identification byte which denotes the type of data which is stored. Based on this
information, the appropriate number of bytes and the manner in which they are read can be
deduced.</p>

<h2>Entries</h2>

<h3>Empty</h3>
<p><img height="72" src="images/structure-empty.png" width="65"></p>
The entry only consists of an identification byte containing the value 69;
    the ASCII value of 'E'. This type of entry is used to represent a piece of information
    that has not been defined for reserved for future use. It has no actual value and should
    be interpreted as a logical NULL.<h3>Byte</h3>
<p><img height="72" src="images/structure-byte.png" width="129"></p>
A &quot;byte&quot; entry is preceded by a single byte containing the value
    98; the ASCII value for 'b'. The next byte contains the actual information stored in the
    entry. This is a rather inefficient method for storing a mass number of bytes given that
    there is as much overhead as actual data. But, in the case of storing small numbers, it
    does save a byte over using an integer entry.<h3>Boolean</h3>
<p><img height="72" src="images/structure-boolean.png" width="129"></p>
A Boolean entry is preceded by a byte containing the value 66; the ASCII
    value for 'B'. This entry is identical in structure to the Byte except the second byte
    will only contain a 1, for True, or a 0 for False.<h3>Integer</h3>
<p><img height="72" src="images/structure-integer.png" width="193"></p>
This is the most common entry used to store the Compiled Grammar Table
    information. Following the identification byte, the integer is stored using 
<a href="../about/byte-ordering.htm" style="text-decoration: underline">Little-Endian</a> byte ordering. In other words, the
    least significant byte is stored first.<h3>String</h3>
<p><img height="72" src="images/structure-string.png" width="385"></p>
<p>A string entry starts with a byte containing the value 83, which is the
    ASCII value for &quot;S&quot;. This is immediately followed by a sequence of 1 or more 
<a href="../about/unicode.htm" style="text-decoration: underline">Unicode</a> characters which are terminated by a null.</p>
</body>
</html>
