<html>

<head>
<link REL="STYLESHEET" HREF="../gold-parser-doc-style.css">
<title>Program: Create Skeleton Program</title>
</head>

<body class="ssMainPage">

<h1>Create Skeleton Program</h1>

<h2>Format</h2>

<table class="ssCodeTable" border="0" cellspacing="0" cellpadding="0">
  <tr>
    <td class="ssCodeTableBody" valign="bottom" nowrap>
	<span class="ssCodeReservedSymbol">goldprog</span> Table-file Template-File [Target-File] [options]</td>
  </tr>
</table>

<h2>Overview</h2>

<p>One of the key obstacles for those using a specific implementation of the Engine is
interacting with a table of rules and symbols. Each rule and symbol is to be uniquely
identified by a table index. If a rule, for instance, has an index of 10 in the parse
tables, the developer must use this value in their programs. </p>

<p>Manually typing each constant definition can be both tedious and problematic - given
that a single incorrect constant could be difficult to debug. For most programming
languages and scripting languages, the number of rules can easily exceed a hundred. </p>

<p>Program Templates are designed to resolve this issue. Essentially, program templates
are a type of tool designed to help the programmer create a &quot;skeleton program&quot;
which contains the source code that is necessary to use a particular implementation of the
Engine. For instance, if an Engine is created for the Java Programming Language, a Program
Template can be used to create a basic skeleton program to use it. This skeleton program
would contain the necessary declarations and function calls to the Engine. In other words,
Program Templates help a programmer use an Engine. </p>

<p>This program does not create any on-screen text. This allows the program to be easily
be called from other applications. To check whether a grammar was successfully analyzed,
check the content of the target file.</p>

<h2>Details</h2>

<table width="100%" class="ssChartTable" cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td valign="top" class="ssChartTableColumn" nowrap>Field</td>
    <td valign="top" class="ssChartTableColumn" nowrap>Values</td>
    <td class="ssChartTableColumn" valign="top">Description</td>
  </tr>
  <tr>
    <td valign="top" class="ssChartTableBodyItem" nowrap>Table-File</td>
    <td valign="top" class="ssChartTableBodyItem" nowrap>&nbsp;</td>
    <td class="ssChartTableBodyDesc" valign="top">Required. This can be either a 
	CGT or EGT file.</td>
  </tr>
  <tr>
    <td valign="top" class="ssChartTableBodyItem" nowrap>Template-File</td>
    <td valign="top" class="ssChartTableBodyItem" nowrap>&nbsp;</td>
    <td class="ssChartTableBodyDesc" valign="top">Required. The Windows version of the Builder
    stores all program templates in a subfolder of the main application. The command line
    version, however, accesses program templates from the current path. </td>
  </tr>
    <tr>
    <td valign="top" class="ssChartTableBodyItem" nowrap>Target-File</td>
    <td valign="top" class="ssChartTableBodyItem" nowrap>&nbsp;</td>
    <td class="ssChartTableBodyDesc" valign="top">Optional. If this field is left blank, the
    program will automatically create a filename using the EGT filename. The new
    filename will contain the same base, but will have the extension specified in the template
    file. For example, test.egt could create test.cpp (if &quot;cpp&quot; is the extension
    specified in the template).</td>
    </tr>
  <tr>
    <td valign="top" class="ssChartTableBodyItem" nowrap>Options</td>
    <td valign="top" class="ssChartTableBodyItem" nowrap>+verbose,<br>-verbose</td>
    <td class="ssChartTableBodyDesc" valign="top">If this flag is set to true, 
	the program will output progress text to the screen as well as error 
	messages. If set to false, no output will be generated. It defaults to true.</td>
  </tr>
</table>

<p>&nbsp;</p>
<table cellpadding="4" cellspacing="0">
	<tr>
		<td valign="top"><b>Note:</b></td>
		<td valign="top">If you prefer, you can use the common
		<span class="CodeInline">/</span> character for designating options. The 
		slash will be interpreted as a <span class="CodeInline">+</span>.&nbsp; 
		So, <span class="CodeInline">+verbose</span> can be specified as
		<span class="CodeInline">/verbose</span>.</td>
	</tr>
</table>
</body>
</html>
