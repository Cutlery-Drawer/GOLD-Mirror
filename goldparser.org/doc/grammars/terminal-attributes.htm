<html>

<head>
<title>Defining Terminals</title>
<link REL="STYLESHEET" HREF="../gold-parser-doc-style.css">
<style type="text/css">

.ssCodeText    {font-family: "Courier New", Courier, monospace; font-weight: bold;}

</style>
</head>

<body class="ssMainPage">

<h1>Terminal Attributes</h1>

<h2>Overview</h2>
    <table border="0" cellspacing="0" cellpadding="0" class="ssChartTable">
      <tr>
        <td width="100%" class="ssChartTableHeader" colspan="2">Symbol 
		Attributes</td>
      </tr>
      <tr>
        <td class="ssChartTableColumn" nowrap>Attribute</td>
        <td class="ssChartTableColumn">Valid Values</td>
      </tr>
      		  <tr>
        <td class="ssChartTableBodyItem" nowrap style="white-space: nowrap">Type</td>
        <td class="ssChartTableBodyItem" nowrap style="white-space: nowrap">
		<span class="ssCodeText" style="font-weight: normal">
		Content</span> / <span class="ssCodeText" style="font-weight: normal">
		Noise</span></td>
        </tr>
      <tr>
        <td class="ssChartTableBodyItem" nowrap style="white-space: nowrap">
		Source</td>
        <td class="ssChartTableBodyItem" nowrap style="white-space: nowrap">
		<span class="ssCodeText" style="font-weight: normal">Lexer</span> 
		/ <span class="ssCodeText" style="font-weight: normal">Virtual</span></td>
      </tr>
      </table>
   
<h2>Details</h2>
<h3>Type</h3>
<p>Terminal attributes allows you to control how the symbol is viewed 
		by the parser. If can be merely considered noise or an essential part 
		of the grammar.&nbsp; Noise symbols are ignored by the parser. Normally, 
		the symbols 'Whitespace' and 'Comment' are automatically defined as 
		'noise'. Any other terminal defaults to 'Content'. </p>
<h3>Source</h3>
<p>This controls whether GOLD will 
		generate DFA states to recognize the terminal. In practically all cases, this will be 
		the case and the terminal will be generated by the lexer. However, in rare circumstances, the developer may want to 
		create the terminal manually at runtime. The alternative value, virtual, 
		will place the symbol into the Symbol Table, but will not create any DFA states. </p>
<p>Languages such as Python, do not use symbols to mark the start and end of a block of
statements. Instead, the indentation of each statement is used to determine when&nbsp; a
block begins and ends. For Python, content of whitespace is important - or at least the <em>position</em>
of a token rather than solely its classification by the lexer. If a program has an
indent of 10 spaces, the grammar must contain a set of rules for statements at this level.
The same is true for all other levels of indentation - requiring an infinite number of
rules to parse.</p>

<p>Virtual terminals are design to resolve problems like this by allowing the developer to
define terminals that will be create manually. Each of these terminals are entered into
the Symbol Table, but will not be recognized by the Engine's lexer. In other words,
these terminals only exist in the Symbol Table and will never be created by the
lexer's Deterministic Finite Automata.</p>

<p>As a result, the developer must create these terminals at runtime and push them onto
the front of the input queue. The actual semantics and method calls will vary greatly
between different implementations of the Engine. In the case of Python, tokens could be created to represent a increase or decrease in
indentation. Of course, the developer can create special tokens for any number of reasons;
not just this one alone. </p>
&nbsp;This is redundant with the old &quot;Virtual Terminals&quot; 
<a href="define-properties.htm">grammar property</a>. Both can be used.<h2>Examples</h2>
<h3>Virtual</h3>
<p>The following example sets the &quot;source&quot; attribute of <span class="CodeInline">
IndentIncrease</span> and <span class="CodeInline">IndentDecrease</span> to 
&quot;virtual&quot;. </p>
<table border="0" cellpadding="0" cellspacing="0" class="ssCodeTable">
	<tr>
		<td class="ssCodeTableBody" width="100%">IndentIncrease @= { Source = 
		Virtual }<br>IndentDecrease @= { Source = Virtual }</td>
	</tr>
</table>

<p>These &quot;virtual&quot; terminals can be used in the grammar, but must be created by 
the developer at parse-time.</p>

<table class="ssCodeTable" border="0" cellspacing="0" cellpadding="0">
  <tr>
    <td width="100%" nowrap class="ssCodeTableBody">&lt;Statement&gt;&nbsp; ::= If &lt;Exp&gt; 
	then <span class="ssCodeEmphasis">IndentInc</span> &lt;Statements&gt; <span
    class="ssCodeEmphasis">IndentDec</span> </td>
  </tr>
</table>

<h3>Noise Terminal</h3>
<p>The following example creates a noise terminal called me. It consists of two 
dash and 1 or more letters. Since it is set to &quot;noise&quot;, it will be viewed as the 
same as whitespace and ignored.</p>
<table border="0" cellpadding="0" cellspacing="0" class="ssCodeTable">
	<tr>
		<td class="ssCodeTableBody" width="100%">IgnoreMe&nbsp; = '--' {Letter}+<br>
		<br>IgnoreMe @= { Type = Noise }</td>
	</tr>
</table>
</body>
</html>
