<html>

<head>
<link REL="STYLESHEET" HREF="../gold-parser-doc-style.css">
<title>Program Templates - Symbol Table</title>
</head>

<body class="ssMainPage">

<h1>Symbol Table</h1>

<h2>Overview</h2>

<p>Since the Compiled Grammar Table file contains the grammar's symbol table, it is often
useful to list each symbol, their name and table index, within the skeleton program.. This
&quot;list&quot; can be in the form of an enumerated constant definition, case statements,
or anything else that the developer needs. The GOLD Parser Builder will scan a template
file and insert a list of symbols when it locates a &quot;symbols&quot; block. </p>

<p>Essentially, a Symbol List contains a text block which will be used to create the
elements of the list. When a &quot;list&quot; is created, this text block will be printed
to the skeleton program for each symbol in the grammar's symbol table. The following
diagram shows the format used to denote a Symbol Lists. The meaning of the ##Delimiter
field is described below.</p>

<h2>Structure</h2>

<p>The ##Symbol-Table block was added in Version 2.5 of the Builder.</p>

<table border="0" cellspacing="0" cellpadding="8">
  <tr>
    <td><table class="ssCodeTable" cellspacing="0" cellpadding="0">
      <tr>
        <td class="ssCodeTableBody" valign="middle" nowrap></td>
        <td class="ssCodeTableBody" valign="middle" nowrap><span class="ssCodeReservedSymbol">##SYMBOL-TABLE</span></td>
        <td class="ssCodeTableBody" valign="middle" nowrap></td>
      </tr>
      <tr>
        <td class="ssCodeTableBody" valign="middle" nowrap></td>
        <td class="ssCodeTableBody" valign="middle" nowrap>...</td>
        <td class="ssCodeTableBody" valign="middle" nowrap></td>
      </tr>
      <tr>
        <td class="ssCodeTableBody" valign="middle" nowrap>[</td>
        <td class="ssCodeTableBody" valign="middle" nowrap><span class="ssCodeReservedSymbol">##SYMBOLS</span></td>
        <td class="ssCodeTableBody" valign="middle" nowrap></td>
      </tr>
      <tr>
        <td class="ssCodeTableBody" valign="middle" nowrap></td>
        <td class="ssCodeTableBody" valign="middle" nowrap>...</td>
        <td class="ssCodeTableBody" valign="middle" nowrap></td>
      </tr>
      <tr>
        <td class="ssCodeTableBody" valign="middle" nowrap></td>
        <td class="ssCodeTableBody" valign="middle" nowrap><span class="ssCodeReservedSymbol">##END-SYMBOLS</span></td>
        <td class="ssCodeTableBody" valign="middle" nowrap>]</td>
      </tr>
      <tr>
        <td class="ssCodeTableBody" valign="middle" nowrap></td>
        <td class="ssCodeTableBody" valign="middle" nowrap>...</td>
        <td class="ssCodeTableBody" valign="middle" nowrap></td>
      </tr>
      <tr>
        <td class="ssCodeTableBody" valign="middle" nowrap></td>
        <td class="ssCodeTableBody" valign="middle" nowrap><span class="ssCodeReservedSymbol">##END-SYMBOL-TABLE</span></td>
        <td class="ssCodeTableBody" valign="middle" nowrap></td>
      </tr>
    </table>
    </td>
    <td>or</td>
    <td><table class="ssCodeTable" cellspacing="0" cellpadding="0">
      <tr>
        <td class="ssCodeTableBody" valign="middle" nowrap></td>
        <td class="ssCodeTableBody" valign="middle" nowrap><span class="ssCodeReservedSymbol">##SYMBOLS</span></td>
        <td class="ssCodeTableBody" valign="middle" nowrap></td>
      </tr>
      <tr>
        <td class="ssCodeTableBody" valign="middle" nowrap></td>
        <td class="ssCodeTableBody" valign="middle" nowrap>...</td>
        <td class="ssCodeTableBody" valign="middle" nowrap></td>
      </tr>
      <tr>
        <td class="ssCodeTableBody" valign="middle" nowrap></td>
        <td class="ssCodeTableBody" valign="middle" nowrap><span class="ssCodeReservedSymbol">##END-SYMBOLS</span></td>
        <td class="ssCodeTableBody" valign="middle" nowrap></td>
      </tr>
    </table>
    </td>
  </tr>
</table>

<h2>Options</h2>

<p>The following tags can be used to enhance the text generated by the skeleton program.</p>

<table class="ssCodeTable" cellspacing="0" border="0" cellpadding="0">
  <tr>
    <td nowrap class="ssCodeTableBody">[</td>
    <td nowrap class="ssCodeTableBody"><span class="ssCodeReservedSymbol">##ID-CASE</span></td>
    <td nowrap class="ssCodeTableBody">{ <span class="ssCodeKeySymbol">ProperCase</span> | <span
    class="ssCodeKeySymbol">Uppercase</span> | <span class="ssCodeKeySymbol">Lowercase</span>
    | <span class="ssCodeKeySymbol">None </span>}</td>
    <td nowrap class="ssCodeTableBody">]</td>
  </tr>
  <tr>
    <td nowrap class="ssCodeTableBody">[</td>
    <td nowrap class="ssCodeTableBody"><span class="ssCodeReservedSymbol">##ID-SEPARATOR</span></td>
    <td nowrap class="ssCodeTableBody"><em>Text</em></td>
    <td nowrap class="ssCodeTableBody">]</td>
  </tr>
  <tr>
    <td nowrap class="ssCodeTableBody">[</td>
    <td nowrap class="ssCodeTableBody"><span class="ssCodeReservedSymbol">##ID-SYMBOL-PREFIX</span></td>
    <td nowrap class="ssCodeTableBody"><em>Text</em></td>
    <td nowrap class="ssCodeTableBody">]</td>
  </tr>
  <tr>
    <td nowrap class="ssCodeTableBody">[</td>
    <td nowrap class="ssCodeTableBody"><span class="ssCodeReservedSymbol">##ID-RULE-PREFIX</span></td>
    <td nowrap class="ssCodeTableBody"><em>Text</em></td>
    <td nowrap class="ssCodeTableBody">]</td>
  </tr>
  <tr>
    <td nowrap class="ssCodeTableBody">[</td>
    <td nowrap class="ssCodeTableBody"><span class="ssCodeReservedSymbol">##DELIMITER</span></td>
    <td nowrap class="ssCodeTableBody"><em>Text</em></td>
    <td nowrap class="ssCodeTableBody">]</td>
  </tr>
</table>

<p>&nbsp;</p>

<table width="90%" class="ssChartTable" border="0" cellspacing="0" cellpadding="0">
  <tr>
    <th class="ssChartTableColumn">Name</th>
    <th class="ssChartTableColumn">Description</th>
  </tr>
  <tr>
    <td valign="top" nowrap class="ssChartTableBodyItem">##ID-CASE </td>
    <td class="ssChartTableBodyDesc">When the GOLD Parser Builder creates identifiers for each
    constant, the system can put each in either ProperCase or Uppercase. This value should be
    set to the standard conventions used in the target language. Lowercase will be supported
    in the next version.</td>
  </tr>
  <tr>
    <td valign="top" nowrap class="ssChartTableBodyItem">##ID-SEPARATOR </td>
    <td class="ssChartTableBodyDesc">For readability, many programming languages allow the use
    of characters, such as underscores and dashes, to be used in identifiers. The value of
    this field will used in the constant names.</td>
  </tr>
  <tr>
    <td valign="top" nowrap class="ssChartTableBodyItem">##ID-SYMBOL-PREFIX</td>
    <td class="ssChartTableBodyDesc">The value of this field will be added to the front each
    generated symbol constant.</td>
  </tr>
  <tr>
    <td valign="top" nowrap class="ssChartTableBodyItem">##ID-RULE-PREFIX</td>
    <td class="ssChartTableBodyDesc">The value of this field will be added to the front each
    generated rule constant.</td>
  </tr>
  <tr>
    <td valign="top" nowrap class="ssChartTableBodyItem">##DELIMITER</td>
    <td class="ssChartTableBodyDesc">This tag is used to specify the characters used to
    display lists. This variable is used in the construction of rule lists, symbol lists, and
    chararacter sets.</td>
  </tr>
</table>

<h2>Variables</h2>

<h3>SYMBOL-TABLE Block</h3>

<table width="90%" class="ssChartTable" border="0" cellspacing="0" cellpadding="0">
  <tr>
    <th class="ssChartTableColumn">Name</th>
    <th class="ssChartTableColumn">Description</th>
  </tr>
  <tr>
    <td valign="top" nowrap class="ssChartTableBodyItem">%Count%</td>
    <td class="ssChartTableBodyDesc">The Count variable contains the number of symbols in the
    grammar's Symbol Table. This variable is useful for array declaration or setting the
    global variables before storing each of the actual symbols.</td>
  </tr>
</table>

<h3>SYMBOLS Block</h3>

<table width="90%" class="ssChartTable" border="0" cellspacing="0" cellpadding="0">
  <tr>
    <th class="ssChartTableColumn">Name</th>
    <th class="ssChartTableColumn">Description</th>
  </tr>
  <tr>
    <td valign="top" nowrap class="ssChartTableBodyItem">%Delimiter%</td>
    <td class="ssChartTableBodyDesc">For each state in the table, this variable is set to the
    value set with the ##Delimiter tag. For the last item in the list, the value is set to a
    number of spaces.</td>
  </tr>
  <tr>
    <td valign="top" nowrap class="ssChartTableBodyItem">%Description%</td>
    <td class="ssChartTableBodyDesc">This variable contains a friendly description of the rule
    - using Backus-Naur form. The variable is designed so that the developer can put comments
    directly into the code that describes the actual content of the rule.</td>
  </tr>
  <tr>
    <td valign="top" nowrap class="ssChartTableBodyItem">%Description.XML%</td>
    <td class="ssChartTableBodyDesc">This variable will display the contents of the
    Description in XML format.</td>
  </tr>
  <tr>
    <td valign="top" nowrap class="ssChartTableBodyItem">%ID%</td>
    <td class="ssChartTableBodyDesc">This variable contains a name generated by the GOLD
    Parser Builder for each symbol in the grammar. The format of the ID is specified by the
    the template's parameter fields.</td>
  </tr>
  <tr>
    <td valign="top" nowrap class="ssChartTableBodyItem">%ID.Padded%</td>
    <td class="ssChartTableBodyDesc">When creating a list, the value of each of these
    variables will contain added spaces so that each identifier is the same width. The
    variable is primarily used in the construction of enumerated constants or anywhere when
    the text should &quot;line-up&quot; for readability.</td>
  </tr>
  <tr>
    <td valign="top" nowrap class="ssChartTableBodyItem">%Kind%</td>
    <td class="ssChartTableBodyDesc">Each symbol in the symbol table contains a
    &quot;kind&quot; which identifies the classification of the symbol. The value of this
    variable will match the numeric value stored in the Compiled Grammar Table file. </td>
  </tr>
  <tr>
    <td valign="top" nowrap class="ssChartTableBodyItem">%Index%</td>
    <td class="ssChartTableBodyDesc">This variable contains the index of the symbol in the
    table. </td>
  </tr>
  <tr>
    <td valign="top" nowrap class="ssChartTableBodyItem">%Name%</td>
    <td class="ssChartTableBodyDesc">This variable contains the formal name of the symbol.</td>
  </tr>
  <tr>
    <td valign="top" nowrap class="ssChartTableBodyItem">%Name.XML%</td>
    <td class="ssChartTableBodyDesc">This variable contains the XML encoding of %Name%.</td>
  </tr>
  <tr>
    <td valign="top" nowrap class="ssChartTableBodyItem">%Value%</td>
    <td class="ssChartTableBodyDesc">This variable simply contains the index of the rule in
    the table. This variable has the same value as %Index%.</td>
  </tr>
  <tr>
    <td valign="top" nowrap class="ssChartTableBodyItem">%Value.Padded%</td>
    <td class="ssChartTableBodyDesc">Like the ID.Padded variable, each item in a generated
    list will contain a number of spaces such that each is the same width.</td>
  </tr>
</table>

<p>&nbsp;</p>

<h4>Symbol 'Kind' Constants</h4>

<table class="ssChartTable" cellspacing="0" cellpadding="0" width="90%">
  <tr>
    <th class="ssChartTableColumn">Value</th>
    <th class="ssChartTableColumn">Description</th>
  </tr>
  <tr>
    <td valign="top" class="ssChartTableBodyItem">0</td>
    <td valign="top" class="ssChartTableBodyDesc">Normal Nonterminal</td>
  </tr>
  <tr>
    <td valign="top" class="ssChartTableBodyItem">1</td>
    <td valign="top" class="ssChartTableBodyDesc">Normal Terminal</td>
  </tr>
  <tr>
    <td valign="top" class="ssChartTableBodyItem">2</td>
    <td valign="top" class="ssChartTableBodyDesc">Whitespace Terminal</td>
  </tr>
  <tr>
    <td valign="top" class="ssChartTableBodyItem">3</td>
    <td valign="top" class="ssChartTableBodyDesc">End Character - End of File. This symbol is
    used to represent the end of the file or the end of the source input.</td>
  </tr>
  <tr>
    <td valign="top" class="ssChartTableBodyItem">4</td>
    <td valign="top" class="ssChartTableBodyDesc">Start of a block quote</td>
  </tr>
  <tr>
    <td valign="top" class="ssChartTableBodyItem">5</td>
    <td valign="top" class="ssChartTableBodyDesc">End of a block quote</td>
  </tr>
  <tr>
    <td valign="top" class="ssChartTableBodyItem">6</td>
    <td valign="top" class="ssChartTableBodyDesc">Line Comment Terminal</td>
  </tr>
  <tr>
    <td valign="top" class="ssChartTableBodyItem">7</td>
    <td valign="top" class="ssChartTableBodyDesc">Error Terminal. If the parser encounters an
    error reading a token, this kind of symbol can used to differentiate it from other
    terminal types.</td>
  </tr>
</table>

<h2>Example: Symbol Table</h2>

<p>The following displays a template that will output the content of the Symbol Table
using formatted text. </p>

<table class="ssCodeTable" cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="100%" nowrap class="ssCodeTableBody"><span class="ssCodeReservedSymbol">##SYMBOL-TABLE</span></td>
  </tr>
  <tr>
    <td width="100%" nowrap class="ssCodeTableBody"><span class="ssCodeNormal">Table Count: </span><span
    class="ssCodeKeySymbol">%Count%</span></td>
  </tr>
  <tr>
    <td width="100%" nowrap class="ssCodeTableBody"><span class="ssCodeReservedSymbol">##SYMBOLS</span></td>
  </tr>
  <tr>
    <td width="100%" nowrap class="ssCodeTableBody">&nbsp;&nbsp; Symbol <span
    class="ssCodeKeySymbol">%Index%</span> </td>
  </tr>
  <tr>
    <td width="100%" nowrap class="ssCodeTableBody">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Name : <span
    class="ssCodeKeySymbol">%Namee%</span> </td>
  </tr>
  <tr>
    <td width="100%" nowrap class="ssCodeTableBody">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    ID&nbsp;&nbsp; : <span class="ssCodeKeySymbol">%ID%</span> </td>
  </tr>
  <tr>
    <td width="100%" nowrap class="ssCodeTableBody">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Value: <span
    class="ssCodeKeySymbol">%Value%</span> </td>
  </tr>
  <tr>
    <td width="100%" nowrap class="ssCodeTableBody">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Kind : <span
    class="ssCodeKeySymbol">%Kind%</span></td>
  </tr>
  <tr>
    <td width="100%" nowrap class="ssCodeTableBody"><span class="ssCodeReservedSymbol">##END-SYMBOLS</span></td>
  </tr>
  <tr>
    <td width="100%" nowrap class="ssCodeTableBody"><span class="ssCodeReservedSymbol">##END-SYMBOL-TABLE</span></td>
  </tr>
</table>

<p>&nbsp;</p>

<p>If the &quot;Simple&quot; example grammar is used, the program template will create the
following text for Symbol #6. The sets before and after #6 were excluded for brevity.</p>

<table class="ssCodeTable" cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="100%" nowrap class="ssCodeTableBody"><span class="ssCodeNormal">Table Count: </span>39</td>
  </tr>
  <tr>
    <td width="100%" nowrap class="ssCodeTableBody">&nbsp;&nbsp; .</td>
  </tr>
  <tr>
    <td width="100%" nowrap class="ssCodeTableBody">&nbsp;&nbsp; .</td>
  </tr>
  <tr>
    <td width="100%" nowrap class="ssCodeTableBody">&nbsp;&nbsp; .</td>
  </tr>
  <tr>
    <td width="100%" nowrap class="ssCodeTableBody">&nbsp;&nbsp; Symbol 6</td>
  </tr>
  <tr>
    <td width="100%" nowrap class="ssCodeTableBody">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Name : -</td>
  </tr>
  <tr>
    <td width="100%" nowrap class="ssCodeTableBody">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    ID&nbsp;&nbsp; : Symbol_Minus</td>
  </tr>
  <tr>
    <td width="100%" nowrap class="ssCodeTableBody">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Value: 6</td>
  </tr>
  <tr>
    <td width="100%" nowrap class="ssCodeTableBody">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Kind : 1</td>
  </tr>
</table>

<h2>Example: Constant Lists</h2>

<p>The following are a few examples on how to define various symbol lists. In most cases,
only a list of enumerated constants would be defined in template.</p>

<p>&nbsp;</p>

<h3>C++ Enumerated Constants</h3>

<table class="ssCodeTable" cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="100%" nowrap class="ssCodeTableBody"><span class="ssCodeNormal">enum
    RuleConstants</span></td>
  </tr>
  <tr>
    <td width="100%" nowrap class="ssCodeTableBody"><span class="ssCodeNormal">{</span></td>
  </tr>
  <tr>
    <td width="100%" nowrap class="ssCodeTableBody"><span class="ssCodeReservedSymbol">##DELIMITER</span><span
    class="ssCodeNormal"> ','</span></td>
  </tr>
  <tr>
    <td width="100%" nowrap class="ssCodeTableBody"><span class="ssCodeReservedSymbol">##SYMBOLS</span></td>
  </tr>
  <tr>
    <td width="100%" nowrap class="ssCodeTableBody">&nbsp;&nbsp;&nbsp; <span
    class="ssCodeKeySymbol">%ID%</span> <span class="ssCodeNormal">= </span><span
    class="ssCodeKeySymbol">%Value%</span><span class="ssCodeNormal"> </span><span
    class="ssCodeKeySymbol">%Delimiter%</span><span class="ssCodeNormal"> // </span><span
    class="ssCodeKeySymbol">%Description%</span></td>
  </tr>
  <tr>
    <td width="100%" nowrap class="ssCodeTableBody"><span class="ssCodeReservedSymbol">##END-SYMBOLS</span></td>
  </tr>
  <tr>
    <td width="100%" nowrap class="ssCodeTableBody">};</td>
  </tr>
</table>

<p>&nbsp;</p>

<h3>Visual Basic Enumerated Constants</h3>

<table class="ssCodeTable" cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="100%" nowrap class="ssCodeTableBody"><span class="ssCodeNormal">Enum
    RuleConstants</span></td>
  </tr>
  <tr>
    <td width="100%" nowrap class="ssCodeTableBody"><span class="ssCodeReservedSymbol">##SYMBOLS</span></td>
  </tr>
  <tr>
    <td width="100%" nowrap class="ssCodeTableBody">&nbsp;&nbsp;&nbsp; <span
    class="ssCodeKeySymbol">%ID%</span> <span class="ssCodeNormal">= </span><span
    class="ssCodeKeySymbol">%Value%</span><span class="ssCodeNormal"> ' </span><span
    class="ssCodeKeySymbol">%Description%</span></td>
  </tr>
  <tr>
    <td width="100%" nowrap class="ssCodeTableBody"><span class="ssCodeReservedSymbol">##END-SYMBOLS</span></td>
  </tr>
  <tr>
    <td width="100%" nowrap class="ssCodeTableBody">End Enum</td>
  </tr>
</table>

<p>&nbsp;</p>
</body>
</html>
